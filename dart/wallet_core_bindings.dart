// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Trust Wallet Core Binding To Dart.
class WalletCore {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  WalletCore(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  int TWHDVersionIsPublic(
    int version,
  ) {
    _TWHDVersionIsPublic ??= _dylib.lookupFunction<_c_TWHDVersionIsPublic,
        _dart_TWHDVersionIsPublic>('TWHDVersionIsPublic');
    return _TWHDVersionIsPublic(
      version,
    );
  }

  _dart_TWHDVersionIsPublic _TWHDVersionIsPublic;

  int TWHDVersionIsPrivate(
    int version,
  ) {
    _TWHDVersionIsPrivate ??= _dylib.lookupFunction<_c_TWHDVersionIsPrivate,
        _dart_TWHDVersionIsPrivate>('TWHDVersionIsPrivate');
    return _TWHDVersionIsPrivate(
      version,
    );
  }

  _dart_TWHDVersionIsPrivate _TWHDVersionIsPrivate;

  ffi.Pointer<ffi.Int8> stringForHRP(
    int hrp,
  ) {
    _stringForHRP ??= _dylib
        .lookupFunction<_c_stringForHRP, _dart_stringForHRP>('stringForHRP');
    return _stringForHRP(
      hrp,
    );
  }

  _dart_stringForHRP _stringForHRP;

  int hrpForString(
    ffi.Pointer<ffi.Int8> string,
  ) {
    _hrpForString ??= _dylib
        .lookupFunction<_c_hrpForString, _dart_hrpForString>('hrpForString');
    return _hrpForString(
      string,
    );
  }

  _dart_hrpForString _hrpForString;

  /// /// Creates a block of data from a byte array.
  ffi.Pointer<ffi.Void> TWDataCreateWithBytes(
    ffi.Pointer<ffi.Uint8> bytes,
    int size,
  ) {
    _TWDataCreateWithBytes ??= _dylib.lookupFunction<_c_TWDataCreateWithBytes,
        _dart_TWDataCreateWithBytes>('TWDataCreateWithBytes');
    return _TWDataCreateWithBytes(
      bytes,
      size,
    );
  }

  _dart_TWDataCreateWithBytes _TWDataCreateWithBytes;

  /// /// Creates an uninitialized block of data with the provided size.
  ffi.Pointer<ffi.Void> TWDataCreateWithSize(
    int size,
  ) {
    _TWDataCreateWithSize ??= _dylib.lookupFunction<_c_TWDataCreateWithSize,
        _dart_TWDataCreateWithSize>('TWDataCreateWithSize');
    return _TWDataCreateWithSize(
      size,
    );
  }

  _dart_TWDataCreateWithSize _TWDataCreateWithSize;

  /// /// Creates a block of data by copying another block of data.
  ffi.Pointer<ffi.Void> TWDataCreateWithData(
    ffi.Pointer<ffi.Void> data,
  ) {
    _TWDataCreateWithData ??= _dylib.lookupFunction<_c_TWDataCreateWithData,
        _dart_TWDataCreateWithData>('TWDataCreateWithData');
    return _TWDataCreateWithData(
      data,
    );
  }

  _dart_TWDataCreateWithData _TWDataCreateWithData;

  /// /// Creates a block of data from a hexadecimal string.  Odd length is invalid (intended grouping to bytes is not obvious).
  ffi.Pointer<ffi.Void> TWDataCreateWithHexString(
    ffi.Pointer<ffi.Void> hex,
  ) {
    _TWDataCreateWithHexString ??= _dylib.lookupFunction<
        _c_TWDataCreateWithHexString,
        _dart_TWDataCreateWithHexString>('TWDataCreateWithHexString');
    return _TWDataCreateWithHexString(
      hex,
    );
  }

  _dart_TWDataCreateWithHexString _TWDataCreateWithHexString;

  /// /// Returns the size in bytes.
  int TWDataSize(
    ffi.Pointer<ffi.Void> data,
  ) {
    _TWDataSize ??=
        _dylib.lookupFunction<_c_TWDataSize, _dart_TWDataSize>('TWDataSize');
    return _TWDataSize(
      data,
    );
  }

  _dart_TWDataSize _TWDataSize;

  /// /// Returns the raw pointer to the contents of data.
  ffi.Pointer<ffi.Uint8> TWDataBytes(
    ffi.Pointer<ffi.Void> data,
  ) {
    _TWDataBytes ??=
        _dylib.lookupFunction<_c_TWDataBytes, _dart_TWDataBytes>('TWDataBytes');
    return _TWDataBytes(
      data,
    );
  }

  _dart_TWDataBytes _TWDataBytes;

  /// /// Returns the byte at the provided index.
  int TWDataGet(
    ffi.Pointer<ffi.Void> data,
    int index,
  ) {
    _TWDataGet ??=
        _dylib.lookupFunction<_c_TWDataGet, _dart_TWDataGet>('TWDataGet');
    return _TWDataGet(
      data,
      index,
    );
  }

  _dart_TWDataGet _TWDataGet;

  /// /// Sets the byte at the provided index.
  void TWDataSet(
    ffi.Pointer<ffi.Void> data,
    int index,
    int byte,
  ) {
    _TWDataSet ??=
        _dylib.lookupFunction<_c_TWDataSet, _dart_TWDataSet>('TWDataSet');
    return _TWDataSet(
      data,
      index,
      byte,
    );
  }

  _dart_TWDataSet _TWDataSet;

  /// /// Copies a range of bytes into the provided buffer.
  void TWDataCopyBytes(
    ffi.Pointer<ffi.Void> data,
    int start,
    int size,
    ffi.Pointer<ffi.Uint8> output,
  ) {
    _TWDataCopyBytes ??=
        _dylib.lookupFunction<_c_TWDataCopyBytes, _dart_TWDataCopyBytes>(
            'TWDataCopyBytes');
    return _TWDataCopyBytes(
      data,
      start,
      size,
      output,
    );
  }

  _dart_TWDataCopyBytes _TWDataCopyBytes;

  /// /// Replaces a range of bytes with the contents of the provided buffer.
  void TWDataReplaceBytes(
    ffi.Pointer<ffi.Void> data,
    int start,
    int size,
    ffi.Pointer<ffi.Uint8> bytes,
  ) {
    _TWDataReplaceBytes ??=
        _dylib.lookupFunction<_c_TWDataReplaceBytes, _dart_TWDataReplaceBytes>(
            'TWDataReplaceBytes');
    return _TWDataReplaceBytes(
      data,
      start,
      size,
      bytes,
    );
  }

  _dart_TWDataReplaceBytes _TWDataReplaceBytes;

  /// /// Appends data from a byte array.
  void TWDataAppendBytes(
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Uint8> bytes,
    int size,
  ) {
    _TWDataAppendBytes ??=
        _dylib.lookupFunction<_c_TWDataAppendBytes, _dart_TWDataAppendBytes>(
            'TWDataAppendBytes');
    return _TWDataAppendBytes(
      data,
      bytes,
      size,
    );
  }

  _dart_TWDataAppendBytes _TWDataAppendBytes;

  /// /// Appends a single byte.
  void TWDataAppendByte(
    ffi.Pointer<ffi.Void> data,
    int byte,
  ) {
    _TWDataAppendByte ??=
        _dylib.lookupFunction<_c_TWDataAppendByte, _dart_TWDataAppendByte>(
            'TWDataAppendByte');
    return _TWDataAppendByte(
      data,
      byte,
    );
  }

  _dart_TWDataAppendByte _TWDataAppendByte;

  /// /// Appends a block of data.
  void TWDataAppendData(
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Void> append,
  ) {
    _TWDataAppendData ??=
        _dylib.lookupFunction<_c_TWDataAppendData, _dart_TWDataAppendData>(
            'TWDataAppendData');
    return _TWDataAppendData(
      data,
      append,
    );
  }

  _dart_TWDataAppendData _TWDataAppendData;

  /// /// Revereses the bytes.
  void TWDataReverse(
    ffi.Pointer<ffi.Void> data,
  ) {
    _TWDataReverse ??= _dylib
        .lookupFunction<_c_TWDataReverse, _dart_TWDataReverse>('TWDataReverse');
    return _TWDataReverse(
      data,
    );
  }

  _dart_TWDataReverse _TWDataReverse;

  /// /// Sets all bytes to the given value.
  void TWDataReset(
    ffi.Pointer<ffi.Void> data,
  ) {
    _TWDataReset ??=
        _dylib.lookupFunction<_c_TWDataReset, _dart_TWDataReset>('TWDataReset');
    return _TWDataReset(
      data,
    );
  }

  _dart_TWDataReset _TWDataReset;

  /// /// Deletes a block of data created with a `TWDataCreate*` method.
  void TWDataDelete(
    ffi.Pointer<ffi.Void> data,
  ) {
    _TWDataDelete ??= _dylib
        .lookupFunction<_c_TWDataDelete, _dart_TWDataDelete>('TWDataDelete');
    return _TWDataDelete(
      data,
    );
  }

  _dart_TWDataDelete _TWDataDelete;

  /// /// Determines whether two data blocks are equal.
  int TWDataEqual(
    ffi.Pointer<ffi.Void> lhs,
    ffi.Pointer<ffi.Void> rhs,
  ) {
    _TWDataEqual ??=
        _dylib.lookupFunction<_c_TWDataEqual, _dart_TWDataEqual>('TWDataEqual');
    return _TWDataEqual(
      lhs,
      rhs,
    );
  }

  _dart_TWDataEqual _TWDataEqual;

  /// /// Creates a string from a null-terminated UTF8 byte array. It must be deleted at the end.
  ffi.Pointer<ffi.Void> TWStringCreateWithUTF8Bytes(
    ffi.Pointer<ffi.Int8> bytes,
  ) {
    _TWStringCreateWithUTF8Bytes ??= _dylib.lookupFunction<
        _c_TWStringCreateWithUTF8Bytes,
        _dart_TWStringCreateWithUTF8Bytes>('TWStringCreateWithUTF8Bytes');
    return _TWStringCreateWithUTF8Bytes(
      bytes,
    );
  }

  _dart_TWStringCreateWithUTF8Bytes _TWStringCreateWithUTF8Bytes;

  /// /// Creates a string from a raw byte array and size.
  ffi.Pointer<ffi.Void> TWStringCreateWithRawBytes(
    ffi.Pointer<ffi.Uint8> bytes,
    int size,
  ) {
    _TWStringCreateWithRawBytes ??= _dylib.lookupFunction<
        _c_TWStringCreateWithRawBytes,
        _dart_TWStringCreateWithRawBytes>('TWStringCreateWithRawBytes');
    return _TWStringCreateWithRawBytes(
      bytes,
      size,
    );
  }

  _dart_TWStringCreateWithRawBytes _TWStringCreateWithRawBytes;

  /// /// Creates a hexadecimal string from a block of data. It must be deleted at the end.
  ffi.Pointer<ffi.Void> TWStringCreateWithHexData(
    ffi.Pointer<ffi.Void> data,
  ) {
    _TWStringCreateWithHexData ??= _dylib.lookupFunction<
        _c_TWStringCreateWithHexData,
        _dart_TWStringCreateWithHexData>('TWStringCreateWithHexData');
    return _TWStringCreateWithHexData(
      data,
    );
  }

  _dart_TWStringCreateWithHexData _TWStringCreateWithHexData;

  /// /// Returns the string size in bytes.
  int TWStringSize(
    ffi.Pointer<ffi.Void> string,
  ) {
    _TWStringSize ??= _dylib
        .lookupFunction<_c_TWStringSize, _dart_TWStringSize>('TWStringSize');
    return _TWStringSize(
      string,
    );
  }

  _dart_TWStringSize _TWStringSize;

  /// /// Returns the byte at the provided index.
  int TWStringGet(
    ffi.Pointer<ffi.Void> string,
    int index,
  ) {
    _TWStringGet ??=
        _dylib.lookupFunction<_c_TWStringGet, _dart_TWStringGet>('TWStringGet');
    return _TWStringGet(
      string,
      index,
    );
  }

  _dart_TWStringGet _TWStringGet;

  /// /// Returns the raw pointer to the string's UTF8 bytes.
  ffi.Pointer<ffi.Int8> TWStringUTF8Bytes(
    ffi.Pointer<ffi.Void> string,
  ) {
    _TWStringUTF8Bytes ??=
        _dylib.lookupFunction<_c_TWStringUTF8Bytes, _dart_TWStringUTF8Bytes>(
            'TWStringUTF8Bytes');
    return _TWStringUTF8Bytes(
      string,
    );
  }

  _dart_TWStringUTF8Bytes _TWStringUTF8Bytes;

  /// /// Deletes a string created with a `TWStringCreate*` method.  After delete it must not be used (can segfault)!
  void TWStringDelete(
    ffi.Pointer<ffi.Void> string,
  ) {
    _TWStringDelete ??=
        _dylib.lookupFunction<_c_TWStringDelete, _dart_TWStringDelete>(
            'TWStringDelete');
    return _TWStringDelete(
      string,
    );
  }

  _dart_TWStringDelete _TWStringDelete;

  /// /// Determines whether two string blocks are equal.
  int TWStringEqual(
    ffi.Pointer<ffi.Void> lhs,
    ffi.Pointer<ffi.Void> rhs,
  ) {
    _TWStringEqual ??= _dylib
        .lookupFunction<_c_TWStringEqual, _dart_TWStringEqual>('TWStringEqual');
    return _TWStringEqual(
      lhs,
      rhs,
    );
  }

  _dart_TWStringEqual _TWStringEqual;

  ffi.Pointer<TWPublicKey> TWPublicKeyCreateWithData(
    ffi.Pointer<ffi.Void> data,
    int type,
  ) {
    _TWPublicKeyCreateWithData ??= _dylib.lookupFunction<
        _c_TWPublicKeyCreateWithData,
        _dart_TWPublicKeyCreateWithData>('TWPublicKeyCreateWithData');
    return _TWPublicKeyCreateWithData(
      data,
      type,
    );
  }

  _dart_TWPublicKeyCreateWithData _TWPublicKeyCreateWithData;

  void TWPublicKeyDelete(
    ffi.Pointer<TWPublicKey> pk,
  ) {
    _TWPublicKeyDelete ??=
        _dylib.lookupFunction<_c_TWPublicKeyDelete, _dart_TWPublicKeyDelete>(
            'TWPublicKeyDelete');
    return _TWPublicKeyDelete(
      pk,
    );
  }

  _dart_TWPublicKeyDelete _TWPublicKeyDelete;

  int TWPublicKeyIsValid(
    ffi.Pointer<ffi.Void> data,
    int type,
  ) {
    _TWPublicKeyIsValid ??=
        _dylib.lookupFunction<_c_TWPublicKeyIsValid, _dart_TWPublicKeyIsValid>(
            'TWPublicKeyIsValid');
    return _TWPublicKeyIsValid(
      data,
      type,
    );
  }

  _dart_TWPublicKeyIsValid _TWPublicKeyIsValid;

  int TWPublicKeyIsCompressed(
    ffi.Pointer<TWPublicKey> pk,
  ) {
    _TWPublicKeyIsCompressed ??= _dylib.lookupFunction<
        _c_TWPublicKeyIsCompressed,
        _dart_TWPublicKeyIsCompressed>('TWPublicKeyIsCompressed');
    return _TWPublicKeyIsCompressed(
      pk,
    );
  }

  _dart_TWPublicKeyIsCompressed _TWPublicKeyIsCompressed;

  ffi.Pointer<TWPublicKey> TWPublicKeyCompressed(
    ffi.Pointer<TWPublicKey> from,
  ) {
    _TWPublicKeyCompressed ??= _dylib.lookupFunction<_c_TWPublicKeyCompressed,
        _dart_TWPublicKeyCompressed>('TWPublicKeyCompressed');
    return _TWPublicKeyCompressed(
      from,
    );
  }

  _dart_TWPublicKeyCompressed _TWPublicKeyCompressed;

  ffi.Pointer<TWPublicKey> TWPublicKeyUncompressed(
    ffi.Pointer<TWPublicKey> from,
  ) {
    _TWPublicKeyUncompressed ??= _dylib.lookupFunction<
        _c_TWPublicKeyUncompressed,
        _dart_TWPublicKeyUncompressed>('TWPublicKeyUncompressed');
    return _TWPublicKeyUncompressed(
      from,
    );
  }

  _dart_TWPublicKeyUncompressed _TWPublicKeyUncompressed;

  ffi.Pointer<ffi.Void> TWPublicKeyData(
    ffi.Pointer<TWPublicKey> pk,
  ) {
    _TWPublicKeyData ??=
        _dylib.lookupFunction<_c_TWPublicKeyData, _dart_TWPublicKeyData>(
            'TWPublicKeyData');
    return _TWPublicKeyData(
      pk,
    );
  }

  _dart_TWPublicKeyData _TWPublicKeyData;

  int TWPublicKeyVerify(
    ffi.Pointer<TWPublicKey> pk,
    ffi.Pointer<ffi.Void> signature,
    ffi.Pointer<ffi.Void> message,
  ) {
    _TWPublicKeyVerify ??=
        _dylib.lookupFunction<_c_TWPublicKeyVerify, _dart_TWPublicKeyVerify>(
            'TWPublicKeyVerify');
    return _TWPublicKeyVerify(
      pk,
      signature,
      message,
    );
  }

  _dart_TWPublicKeyVerify _TWPublicKeyVerify;

  int TWPublicKeyVerifySchnorr(
    ffi.Pointer<TWPublicKey> pk,
    ffi.Pointer<ffi.Void> signature,
    ffi.Pointer<ffi.Void> message,
  ) {
    _TWPublicKeyVerifySchnorr ??= _dylib.lookupFunction<
        _c_TWPublicKeyVerifySchnorr,
        _dart_TWPublicKeyVerifySchnorr>('TWPublicKeyVerifySchnorr');
    return _TWPublicKeyVerifySchnorr(
      pk,
      signature,
      message,
    );
  }

  _dart_TWPublicKeyVerifySchnorr _TWPublicKeyVerifySchnorr;

  int TWPublicKeyKeyType(
    ffi.Pointer<TWPublicKey> publicKey,
  ) {
    _TWPublicKeyKeyType ??=
        _dylib.lookupFunction<_c_TWPublicKeyKeyType, _dart_TWPublicKeyKeyType>(
            'TWPublicKeyKeyType');
    return _TWPublicKeyKeyType(
      publicKey,
    );
  }

  _dart_TWPublicKeyKeyType _TWPublicKeyKeyType;

  ffi.Pointer<ffi.Void> TWPublicKeyDescription(
    ffi.Pointer<TWPublicKey> publicKey,
  ) {
    _TWPublicKeyDescription ??= _dylib.lookupFunction<_c_TWPublicKeyDescription,
        _dart_TWPublicKeyDescription>('TWPublicKeyDescription');
    return _TWPublicKeyDescription(
      publicKey,
    );
  }

  _dart_TWPublicKeyDescription _TWPublicKeyDescription;

  ffi.Pointer<TWPublicKey> TWPublicKeyRecover(
    ffi.Pointer<ffi.Void> signature,
    ffi.Pointer<ffi.Void> message,
  ) {
    _TWPublicKeyRecover ??=
        _dylib.lookupFunction<_c_TWPublicKeyRecover, _dart_TWPublicKeyRecover>(
            'TWPublicKeyRecover');
    return _TWPublicKeyRecover(
      signature,
      message,
    );
  }

  _dart_TWPublicKeyRecover _TWPublicKeyRecover;

  ffi.Pointer<TWPrivateKey> TWPrivateKeyCreate() {
    _TWPrivateKeyCreate ??=
        _dylib.lookupFunction<_c_TWPrivateKeyCreate, _dart_TWPrivateKeyCreate>(
            'TWPrivateKeyCreate');
    return _TWPrivateKeyCreate();
  }

  _dart_TWPrivateKeyCreate _TWPrivateKeyCreate;

  ffi.Pointer<TWPrivateKey> TWPrivateKeyCreateWithData(
    ffi.Pointer<ffi.Void> data,
  ) {
    _TWPrivateKeyCreateWithData ??= _dylib.lookupFunction<
        _c_TWPrivateKeyCreateWithData,
        _dart_TWPrivateKeyCreateWithData>('TWPrivateKeyCreateWithData');
    return _TWPrivateKeyCreateWithData(
      data,
    );
  }

  _dart_TWPrivateKeyCreateWithData _TWPrivateKeyCreateWithData;

  ffi.Pointer<TWPrivateKey> TWPrivateKeyCreateCopy(
    ffi.Pointer<TWPrivateKey> key,
  ) {
    _TWPrivateKeyCreateCopy ??= _dylib.lookupFunction<_c_TWPrivateKeyCreateCopy,
        _dart_TWPrivateKeyCreateCopy>('TWPrivateKeyCreateCopy');
    return _TWPrivateKeyCreateCopy(
      key,
    );
  }

  _dart_TWPrivateKeyCreateCopy _TWPrivateKeyCreateCopy;

  void TWPrivateKeyDelete(
    ffi.Pointer<TWPrivateKey> pk,
  ) {
    _TWPrivateKeyDelete ??=
        _dylib.lookupFunction<_c_TWPrivateKeyDelete, _dart_TWPrivateKeyDelete>(
            'TWPrivateKeyDelete');
    return _TWPrivateKeyDelete(
      pk,
    );
  }

  _dart_TWPrivateKeyDelete _TWPrivateKeyDelete;

  int TWPrivateKeyIsValid(
    ffi.Pointer<ffi.Void> data,
    int curve,
  ) {
    _TWPrivateKeyIsValid ??= _dylib.lookupFunction<_c_TWPrivateKeyIsValid,
        _dart_TWPrivateKeyIsValid>('TWPrivateKeyIsValid');
    return _TWPrivateKeyIsValid(
      data,
      curve,
    );
  }

  _dart_TWPrivateKeyIsValid _TWPrivateKeyIsValid;

  ffi.Pointer<ffi.Void> TWPrivateKeyData(
    ffi.Pointer<TWPrivateKey> pk,
  ) {
    _TWPrivateKeyData ??=
        _dylib.lookupFunction<_c_TWPrivateKeyData, _dart_TWPrivateKeyData>(
            'TWPrivateKeyData');
    return _TWPrivateKeyData(
      pk,
    );
  }

  _dart_TWPrivateKeyData _TWPrivateKeyData;

  /// /// Returns the public key associated with this private key.
  ffi.Pointer<TWPublicKey> TWPrivateKeyGetPublicKeySecp256k1(
    ffi.Pointer<TWPrivateKey> pk,
    int compressed,
  ) {
    _TWPrivateKeyGetPublicKeySecp256k1 ??= _dylib.lookupFunction<
            _c_TWPrivateKeyGetPublicKeySecp256k1,
            _dart_TWPrivateKeyGetPublicKeySecp256k1>(
        'TWPrivateKeyGetPublicKeySecp256k1');
    return _TWPrivateKeyGetPublicKeySecp256k1(
      pk,
      compressed,
    );
  }

  _dart_TWPrivateKeyGetPublicKeySecp256k1 _TWPrivateKeyGetPublicKeySecp256k1;

  /// /// Returns the public key associated with this private key.
  ffi.Pointer<TWPublicKey> TWPrivateKeyGetPublicKeyNist256p1(
    ffi.Pointer<TWPrivateKey> pk,
  ) {
    _TWPrivateKeyGetPublicKeyNist256p1 ??= _dylib.lookupFunction<
            _c_TWPrivateKeyGetPublicKeyNist256p1,
            _dart_TWPrivateKeyGetPublicKeyNist256p1>(
        'TWPrivateKeyGetPublicKeyNist256p1');
    return _TWPrivateKeyGetPublicKeyNist256p1(
      pk,
    );
  }

  _dart_TWPrivateKeyGetPublicKeyNist256p1 _TWPrivateKeyGetPublicKeyNist256p1;

  /// /// Returns the public key associated with this private key.
  ffi.Pointer<TWPublicKey> TWPrivateKeyGetPublicKeyEd25519(
    ffi.Pointer<TWPrivateKey> pk,
  ) {
    _TWPrivateKeyGetPublicKeyEd25519 ??= _dylib.lookupFunction<
            _c_TWPrivateKeyGetPublicKeyEd25519,
            _dart_TWPrivateKeyGetPublicKeyEd25519>(
        'TWPrivateKeyGetPublicKeyEd25519');
    return _TWPrivateKeyGetPublicKeyEd25519(
      pk,
    );
  }

  _dart_TWPrivateKeyGetPublicKeyEd25519 _TWPrivateKeyGetPublicKeyEd25519;

  /// /// Returns the public key associated with this private key.
  ffi.Pointer<TWPublicKey> TWPrivateKeyGetPublicKeyEd25519Blake2b(
    ffi.Pointer<TWPrivateKey> pk,
  ) {
    _TWPrivateKeyGetPublicKeyEd25519Blake2b ??= _dylib.lookupFunction<
            _c_TWPrivateKeyGetPublicKeyEd25519Blake2b,
            _dart_TWPrivateKeyGetPublicKeyEd25519Blake2b>(
        'TWPrivateKeyGetPublicKeyEd25519Blake2b');
    return _TWPrivateKeyGetPublicKeyEd25519Blake2b(
      pk,
    );
  }

  _dart_TWPrivateKeyGetPublicKeyEd25519Blake2b
      _TWPrivateKeyGetPublicKeyEd25519Blake2b;

  /// /// Returns the public key associated with this private key.
  ffi.Pointer<TWPublicKey> TWPrivateKeyGetPublicKeyEd25519Extended(
    ffi.Pointer<TWPrivateKey> pk,
  ) {
    _TWPrivateKeyGetPublicKeyEd25519Extended ??= _dylib.lookupFunction<
            _c_TWPrivateKeyGetPublicKeyEd25519Extended,
            _dart_TWPrivateKeyGetPublicKeyEd25519Extended>(
        'TWPrivateKeyGetPublicKeyEd25519Extended');
    return _TWPrivateKeyGetPublicKeyEd25519Extended(
      pk,
    );
  }

  _dart_TWPrivateKeyGetPublicKeyEd25519Extended
      _TWPrivateKeyGetPublicKeyEd25519Extended;

  /// /// Returns the public key associated with this private key.
  ffi.Pointer<TWPublicKey> TWPrivateKeyGetPublicKeyCurve25519(
    ffi.Pointer<TWPrivateKey> pk,
  ) {
    _TWPrivateKeyGetPublicKeyCurve25519 ??= _dylib.lookupFunction<
            _c_TWPrivateKeyGetPublicKeyCurve25519,
            _dart_TWPrivateKeyGetPublicKeyCurve25519>(
        'TWPrivateKeyGetPublicKeyCurve25519');
    return _TWPrivateKeyGetPublicKeyCurve25519(
      pk,
    );
  }

  _dart_TWPrivateKeyGetPublicKeyCurve25519 _TWPrivateKeyGetPublicKeyCurve25519;

  /// /// Signs a digest using ECDSA and given curve.
  ffi.Pointer<ffi.Void> TWPrivateKeySign(
    ffi.Pointer<TWPrivateKey> pk,
    ffi.Pointer<ffi.Void> digest,
    int curve,
  ) {
    _TWPrivateKeySign ??=
        _dylib.lookupFunction<_c_TWPrivateKeySign, _dart_TWPrivateKeySign>(
            'TWPrivateKeySign');
    return _TWPrivateKeySign(
      pk,
      digest,
      curve,
    );
  }

  _dart_TWPrivateKeySign _TWPrivateKeySign;

  /// /// Signs a digest using ECDSA and given curve. The result is encoded with DER.
  ffi.Pointer<ffi.Void> TWPrivateKeySignAsDER(
    ffi.Pointer<TWPrivateKey> pk,
    ffi.Pointer<ffi.Void> digest,
    int curve,
  ) {
    _TWPrivateKeySignAsDER ??= _dylib.lookupFunction<_c_TWPrivateKeySignAsDER,
        _dart_TWPrivateKeySignAsDER>('TWPrivateKeySignAsDER');
    return _TWPrivateKeySignAsDER(
      pk,
      digest,
      curve,
    );
  }

  _dart_TWPrivateKeySignAsDER _TWPrivateKeySignAsDER;

  /// /// Signs a digest using ECDSA and given curve, returns schnoor signature.
  ffi.Pointer<ffi.Void> TWPrivateKeySignSchnorr(
    ffi.Pointer<TWPrivateKey> pk,
    ffi.Pointer<ffi.Void> message,
    int curve,
  ) {
    _TWPrivateKeySignSchnorr ??= _dylib.lookupFunction<
        _c_TWPrivateKeySignSchnorr,
        _dart_TWPrivateKeySignSchnorr>('TWPrivateKeySignSchnorr');
    return _TWPrivateKeySignSchnorr(
      pk,
      message,
      curve,
    );
  }

  _dart_TWPrivateKeySignSchnorr _TWPrivateKeySignSchnorr;

  /// /// Returns the blockchain for a coin type.
  int TWCoinTypeBlockchain(
    int coin,
  ) {
    _TWCoinTypeBlockchain ??= _dylib.lookupFunction<_c_TWCoinTypeBlockchain,
        _dart_TWCoinTypeBlockchain>('TWCoinTypeBlockchain');
    return _TWCoinTypeBlockchain(
      coin,
    );
  }

  _dart_TWCoinTypeBlockchain _TWCoinTypeBlockchain;

  /// /// Returns the purpose for a coin type.
  int TWCoinTypePurpose(
    int coin,
  ) {
    _TWCoinTypePurpose ??=
        _dylib.lookupFunction<_c_TWCoinTypePurpose, _dart_TWCoinTypePurpose>(
            'TWCoinTypePurpose');
    return _TWCoinTypePurpose(
      coin,
    );
  }

  _dart_TWCoinTypePurpose _TWCoinTypePurpose;

  /// /// Returns the curve that should be used for a coin type.
  int TWCoinTypeCurve(
    int coin,
  ) {
    _TWCoinTypeCurve ??=
        _dylib.lookupFunction<_c_TWCoinTypeCurve, _dart_TWCoinTypeCurve>(
            'TWCoinTypeCurve');
    return _TWCoinTypeCurve(
      coin,
    );
  }

  _dart_TWCoinTypeCurve _TWCoinTypeCurve;

  /// /// Returns the xpub HD version that should be used for a coin type.
  int TWCoinTypeXpubVersion(
    int coin,
  ) {
    _TWCoinTypeXpubVersion ??= _dylib.lookupFunction<_c_TWCoinTypeXpubVersion,
        _dart_TWCoinTypeXpubVersion>('TWCoinTypeXpubVersion');
    return _TWCoinTypeXpubVersion(
      coin,
    );
  }

  _dart_TWCoinTypeXpubVersion _TWCoinTypeXpubVersion;

  /// /// Returns the xprv HD version that should be used for a coin type.
  int TWCoinTypeXprvVersion(
    int coin,
  ) {
    _TWCoinTypeXprvVersion ??= _dylib.lookupFunction<_c_TWCoinTypeXprvVersion,
        _dart_TWCoinTypeXprvVersion>('TWCoinTypeXprvVersion');
    return _TWCoinTypeXprvVersion(
      coin,
    );
  }

  _dart_TWCoinTypeXprvVersion _TWCoinTypeXprvVersion;

  /// /// Validates an address string.
  int TWCoinTypeValidate(
    int coin,
    ffi.Pointer<ffi.Void> address,
  ) {
    _TWCoinTypeValidate ??=
        _dylib.lookupFunction<_c_TWCoinTypeValidate, _dart_TWCoinTypeValidate>(
            'TWCoinTypeValidate');
    return _TWCoinTypeValidate(
      coin,
      address,
    );
  }

  _dart_TWCoinTypeValidate _TWCoinTypeValidate;

  /// /// Returns the default derivation path for a particular coin.
  ffi.Pointer<ffi.Void> TWCoinTypeDerivationPath(
    int coin,
  ) {
    _TWCoinTypeDerivationPath ??= _dylib.lookupFunction<
        _c_TWCoinTypeDerivationPath,
        _dart_TWCoinTypeDerivationPath>('TWCoinTypeDerivationPath');
    return _TWCoinTypeDerivationPath(
      coin,
    );
  }

  _dart_TWCoinTypeDerivationPath _TWCoinTypeDerivationPath;

  /// /// Derives the address for a particular coin from the private key.
  ffi.Pointer<ffi.Void> TWCoinTypeDeriveAddress(
    int coin,
    ffi.Pointer<TWPrivateKey> privateKey,
  ) {
    _TWCoinTypeDeriveAddress ??= _dylib.lookupFunction<
        _c_TWCoinTypeDeriveAddress,
        _dart_TWCoinTypeDeriveAddress>('TWCoinTypeDeriveAddress');
    return _TWCoinTypeDeriveAddress(
      coin,
      privateKey,
    );
  }

  _dart_TWCoinTypeDeriveAddress _TWCoinTypeDeriveAddress;

  /// /// Derives the address for a particular coin from the public key.
  ffi.Pointer<ffi.Void> TWCoinTypeDeriveAddressFromPublicKey(
    int coin,
    ffi.Pointer<TWPublicKey> publicKey,
  ) {
    _TWCoinTypeDeriveAddressFromPublicKey ??= _dylib.lookupFunction<
            _c_TWCoinTypeDeriveAddressFromPublicKey,
            _dart_TWCoinTypeDeriveAddressFromPublicKey>(
        'TWCoinTypeDeriveAddressFromPublicKey');
    return _TWCoinTypeDeriveAddressFromPublicKey(
      coin,
      publicKey,
    );
  }

  _dart_TWCoinTypeDeriveAddressFromPublicKey
      _TWCoinTypeDeriveAddressFromPublicKey;

  /// /// HRP for this coin type
  int TWCoinTypeHRP(
    int coin,
  ) {
    _TWCoinTypeHRP ??= _dylib
        .lookupFunction<_c_TWCoinTypeHRP, _dart_TWCoinTypeHRP>('TWCoinTypeHRP');
    return _TWCoinTypeHRP(
      coin,
    );
  }

  _dart_TWCoinTypeHRP _TWCoinTypeHRP;

  /// /// P2PKH prefix for this coin type
  int TWCoinTypeP2pkhPrefix(
    int coin,
  ) {
    _TWCoinTypeP2pkhPrefix ??= _dylib.lookupFunction<_c_TWCoinTypeP2pkhPrefix,
        _dart_TWCoinTypeP2pkhPrefix>('TWCoinTypeP2pkhPrefix');
    return _TWCoinTypeP2pkhPrefix(
      coin,
    );
  }

  _dart_TWCoinTypeP2pkhPrefix _TWCoinTypeP2pkhPrefix;

  /// /// P2SH prefix for this coin type
  int TWCoinTypeP2shPrefix(
    int coin,
  ) {
    _TWCoinTypeP2shPrefix ??= _dylib.lookupFunction<_c_TWCoinTypeP2shPrefix,
        _dart_TWCoinTypeP2shPrefix>('TWCoinTypeP2shPrefix');
    return _TWCoinTypeP2shPrefix(
      coin,
    );
  }

  _dart_TWCoinTypeP2shPrefix _TWCoinTypeP2shPrefix;

  /// /// Static prefix for this coin type
  int TWCoinTypeStaticPrefix(
    int coin,
  ) {
    _TWCoinTypeStaticPrefix ??= _dylib.lookupFunction<_c_TWCoinTypeStaticPrefix,
        _dart_TWCoinTypeStaticPrefix>('TWCoinTypeStaticPrefix');
    return _TWCoinTypeStaticPrefix(
      coin,
    );
  }

  _dart_TWCoinTypeStaticPrefix _TWCoinTypeStaticPrefix;

  /// /// Static prefix for this coin type
  int TWCoinTypeSlip44Id(
    int coin,
  ) {
    _TWCoinTypeSlip44Id ??=
        _dylib.lookupFunction<_c_TWCoinTypeSlip44Id, _dart_TWCoinTypeSlip44Id>(
            'TWCoinTypeSlip44Id');
    return _TWCoinTypeSlip44Id(
      coin,
    );
  }

  _dart_TWCoinTypeSlip44Id _TWCoinTypeSlip44Id;

  /// /// Determines if a mnemonic phrase is valid.
  int TWHDWalletIsValid(
    ffi.Pointer<ffi.Void> mnemonic,
  ) {
    _TWHDWalletIsValid ??=
        _dylib.lookupFunction<_c_TWHDWalletIsValid, _dart_TWHDWalletIsValid>(
            'TWHDWalletIsValid');
    return _TWHDWalletIsValid(
      mnemonic,
    );
  }

  _dart_TWHDWalletIsValid _TWHDWalletIsValid;

  /// /// Creates a new random HDWallet with the provided strength in bits.  Returned object needs to be deleted.
  ffi.Pointer<TWHDWallet> TWHDWalletCreate(
    int strength,
    ffi.Pointer<ffi.Void> passphrase,
  ) {
    _TWHDWalletCreate ??=
        _dylib.lookupFunction<_c_TWHDWalletCreate, _dart_TWHDWalletCreate>(
            'TWHDWalletCreate');
    return _TWHDWalletCreate(
      strength,
      passphrase,
    );
  }

  _dart_TWHDWalletCreate _TWHDWalletCreate;

  /// /// Creates an HDWallet from a mnemonic seed.  Returned object needs to be deleted.
  ffi.Pointer<TWHDWallet> TWHDWalletCreateWithMnemonic(
    ffi.Pointer<ffi.Void> mnemonic,
    ffi.Pointer<ffi.Void> passphrase,
  ) {
    _TWHDWalletCreateWithMnemonic ??= _dylib.lookupFunction<
        _c_TWHDWalletCreateWithMnemonic,
        _dart_TWHDWalletCreateWithMnemonic>('TWHDWalletCreateWithMnemonic');
    return _TWHDWalletCreateWithMnemonic(
      mnemonic,
      passphrase,
    );
  }

  _dart_TWHDWalletCreateWithMnemonic _TWHDWalletCreateWithMnemonic;

  /// /// Creates an HDWallet from a seed.  Returned object needs to be deleted.
  ffi.Pointer<TWHDWallet> TWHDWalletCreateWithData(
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Void> passphrase,
  ) {
    _TWHDWalletCreateWithData ??= _dylib.lookupFunction<
        _c_TWHDWalletCreateWithData,
        _dart_TWHDWalletCreateWithData>('TWHDWalletCreateWithData');
    return _TWHDWalletCreateWithData(
      data,
      passphrase,
    );
  }

  _dart_TWHDWalletCreateWithData _TWHDWalletCreateWithData;

  /// /// Deletes a wallet.
  void TWHDWalletDelete(
    ffi.Pointer<TWHDWallet> wallet,
  ) {
    _TWHDWalletDelete ??=
        _dylib.lookupFunction<_c_TWHDWalletDelete, _dart_TWHDWalletDelete>(
            'TWHDWalletDelete');
    return _TWHDWalletDelete(
      wallet,
    );
  }

  _dart_TWHDWalletDelete _TWHDWalletDelete;

  /// /// Wallet seed.
  ffi.Pointer<ffi.Void> TWHDWalletSeed(
    ffi.Pointer<TWHDWallet> wallet,
  ) {
    _TWHDWalletSeed ??=
        _dylib.lookupFunction<_c_TWHDWalletSeed, _dart_TWHDWalletSeed>(
            'TWHDWalletSeed');
    return _TWHDWalletSeed(
      wallet,
    );
  }

  _dart_TWHDWalletSeed _TWHDWalletSeed;

  ffi.Pointer<ffi.Void> TWHDWalletMnemonic(
    ffi.Pointer<TWHDWallet> wallet,
  ) {
    _TWHDWalletMnemonic ??=
        _dylib.lookupFunction<_c_TWHDWalletMnemonic, _dart_TWHDWalletMnemonic>(
            'TWHDWalletMnemonic');
    return _TWHDWalletMnemonic(
      wallet,
    );
  }

  _dart_TWHDWalletMnemonic _TWHDWalletMnemonic;

  /// /// Returns master key.  Returned object needs to be deleted.
  ffi.Pointer<TWPrivateKey> TWHDWalletGetMasterKey(
    ffi.Pointer<TWHDWallet> wallet,
    int curve,
  ) {
    _TWHDWalletGetMasterKey ??= _dylib.lookupFunction<_c_TWHDWalletGetMasterKey,
        _dart_TWHDWalletGetMasterKey>('TWHDWalletGetMasterKey');
    return _TWHDWalletGetMasterKey(
      wallet,
      curve,
    );
  }

  _dart_TWHDWalletGetMasterKey _TWHDWalletGetMasterKey;

  /// /// Generates the default private key for the specified coin.  Returned object needs to be deleted.
  ffi.Pointer<TWPrivateKey> TWHDWalletGetKeyForCoin(
    ffi.Pointer<TWHDWallet> wallet,
    int coin,
  ) {
    _TWHDWalletGetKeyForCoin ??= _dylib.lookupFunction<
        _c_TWHDWalletGetKeyForCoin,
        _dart_TWHDWalletGetKeyForCoin>('TWHDWalletGetKeyForCoin');
    return _TWHDWalletGetKeyForCoin(
      wallet,
      coin,
    );
  }

  _dart_TWHDWalletGetKeyForCoin _TWHDWalletGetKeyForCoin;

  /// /// Generates the default address for the specified coin (without exposing intermediary private key).
  ffi.Pointer<ffi.Void> TWHDWalletGetAddressForCoin(
    ffi.Pointer<TWHDWallet> wallet,
    int coin,
  ) {
    _TWHDWalletGetAddressForCoin ??= _dylib.lookupFunction<
        _c_TWHDWalletGetAddressForCoin,
        _dart_TWHDWalletGetAddressForCoin>('TWHDWalletGetAddressForCoin');
    return _TWHDWalletGetAddressForCoin(
      wallet,
      coin,
    );
  }

  _dart_TWHDWalletGetAddressForCoin _TWHDWalletGetAddressForCoin;

  /// /// Generates the private key for the specified derivation path.  Returned object needs to be deleted.
  ffi.Pointer<TWPrivateKey> TWHDWalletGetKey(
    ffi.Pointer<TWHDWallet> wallet,
    int coin,
    ffi.Pointer<ffi.Void> derivationPath,
  ) {
    _TWHDWalletGetKey ??=
        _dylib.lookupFunction<_c_TWHDWalletGetKey, _dart_TWHDWalletGetKey>(
            'TWHDWalletGetKey');
    return _TWHDWalletGetKey(
      wallet,
      coin,
      derivationPath,
    );
  }

  _dart_TWHDWalletGetKey _TWHDWalletGetKey;

  /// /// Generates the private key for the specified BIP44 path.  Returned object needs to be deleted.
  /// ///
  /// /// @see https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki
  ffi.Pointer<TWPrivateKey> TWHDWalletGetKeyBIP44(
    ffi.Pointer<TWHDWallet> wallet,
    int coin,
    int account,
    int change,
    int address,
  ) {
    _TWHDWalletGetKeyBIP44 ??= _dylib.lookupFunction<_c_TWHDWalletGetKeyBIP44,
        _dart_TWHDWalletGetKeyBIP44>('TWHDWalletGetKeyBIP44');
    return _TWHDWalletGetKeyBIP44(
      wallet,
      coin,
      account,
      change,
      address,
    );
  }

  _dart_TWHDWalletGetKeyBIP44 _TWHDWalletGetKeyBIP44;

  /// /// Returns the extended private key.
  ffi.Pointer<ffi.Void> TWHDWalletGetExtendedPrivateKey(
    ffi.Pointer<TWHDWallet> wallet,
    int purpose,
    int coin,
    int version,
  ) {
    _TWHDWalletGetExtendedPrivateKey ??= _dylib.lookupFunction<
            _c_TWHDWalletGetExtendedPrivateKey,
            _dart_TWHDWalletGetExtendedPrivateKey>(
        'TWHDWalletGetExtendedPrivateKey');
    return _TWHDWalletGetExtendedPrivateKey(
      wallet,
      purpose,
      coin,
      version,
    );
  }

  _dart_TWHDWalletGetExtendedPrivateKey _TWHDWalletGetExtendedPrivateKey;

  /// /// Returns the exteded public key.  Returned object needs to be deleted.
  ffi.Pointer<ffi.Void> TWHDWalletGetExtendedPublicKey(
    ffi.Pointer<TWHDWallet> wallet,
    int purpose,
    int coin,
    int version,
  ) {
    _TWHDWalletGetExtendedPublicKey ??= _dylib.lookupFunction<
        _c_TWHDWalletGetExtendedPublicKey,
        _dart_TWHDWalletGetExtendedPublicKey>('TWHDWalletGetExtendedPublicKey');
    return _TWHDWalletGetExtendedPublicKey(
      wallet,
      purpose,
      coin,
      version,
    );
  }

  _dart_TWHDWalletGetExtendedPublicKey _TWHDWalletGetExtendedPublicKey;

  /// /// Computes the public key from an exteded public key representation.  Returned object needs to be deleted.
  ffi.Pointer<TWPublicKey> TWHDWalletGetPublicKeyFromExtended(
    ffi.Pointer<ffi.Void> extended,
    int coin,
    ffi.Pointer<ffi.Void> derivationPath,
  ) {
    _TWHDWalletGetPublicKeyFromExtended ??= _dylib.lookupFunction<
            _c_TWHDWalletGetPublicKeyFromExtended,
            _dart_TWHDWalletGetPublicKeyFromExtended>(
        'TWHDWalletGetPublicKeyFromExtended');
    return _TWHDWalletGetPublicKeyFromExtended(
      extended,
      coin,
      derivationPath,
    );
  }

  _dart_TWHDWalletGetPublicKeyFromExtended _TWHDWalletGetPublicKeyFromExtended;

  /// /// Loads a key from a file.  Returned object needs to be deleted.
  ffi.Pointer<TWStoredKey> TWStoredKeyLoad(
    ffi.Pointer<ffi.Void> path,
  ) {
    _TWStoredKeyLoad ??=
        _dylib.lookupFunction<_c_TWStoredKeyLoad, _dart_TWStoredKeyLoad>(
            'TWStoredKeyLoad');
    return _TWStoredKeyLoad(
      path,
    );
  }

  _dart_TWStoredKeyLoad _TWStoredKeyLoad;

  /// /// Imports a private key.  Returned object needs to be deleted.
  ffi.Pointer<TWStoredKey> TWStoredKeyImportPrivateKey(
    ffi.Pointer<ffi.Void> privateKey,
    ffi.Pointer<ffi.Void> name,
    ffi.Pointer<ffi.Void> password,
    int coin,
  ) {
    _TWStoredKeyImportPrivateKey ??= _dylib.lookupFunction<
        _c_TWStoredKeyImportPrivateKey,
        _dart_TWStoredKeyImportPrivateKey>('TWStoredKeyImportPrivateKey');
    return _TWStoredKeyImportPrivateKey(
      privateKey,
      name,
      password,
      coin,
    );
  }

  _dart_TWStoredKeyImportPrivateKey _TWStoredKeyImportPrivateKey;

  /// /// Imports an HD wallet.  Returned object needs to be deleted.
  ffi.Pointer<TWStoredKey> TWStoredKeyImportHDWallet(
    ffi.Pointer<ffi.Void> mnemonic,
    ffi.Pointer<ffi.Void> name,
    ffi.Pointer<ffi.Void> password,
    int coin,
  ) {
    _TWStoredKeyImportHDWallet ??= _dylib.lookupFunction<
        _c_TWStoredKeyImportHDWallet,
        _dart_TWStoredKeyImportHDWallet>('TWStoredKeyImportHDWallet');
    return _TWStoredKeyImportHDWallet(
      mnemonic,
      name,
      password,
      coin,
    );
  }

  _dart_TWStoredKeyImportHDWallet _TWStoredKeyImportHDWallet;

  /// /// Imports a key from JSON.  Returned object needs to be deleted.
  ffi.Pointer<TWStoredKey> TWStoredKeyImportJSON(
    ffi.Pointer<ffi.Void> json,
  ) {
    _TWStoredKeyImportJSON ??= _dylib.lookupFunction<_c_TWStoredKeyImportJSON,
        _dart_TWStoredKeyImportJSON>('TWStoredKeyImportJSON');
    return _TWStoredKeyImportJSON(
      json,
    );
  }

  _dart_TWStoredKeyImportJSON _TWStoredKeyImportJSON;

  /// /// Creates a new key.  Returned object needs to be deleted.
  ffi.Pointer<TWStoredKey> TWStoredKeyCreate(
    ffi.Pointer<ffi.Void> name,
    ffi.Pointer<ffi.Void> password,
  ) {
    _TWStoredKeyCreate ??=
        _dylib.lookupFunction<_c_TWStoredKeyCreate, _dart_TWStoredKeyCreate>(
            'TWStoredKeyCreate');
    return _TWStoredKeyCreate(
      name,
      password,
    );
  }

  _dart_TWStoredKeyCreate _TWStoredKeyCreate;

  void TWStoredKeyDelete(
    ffi.Pointer<TWStoredKey> key,
  ) {
    _TWStoredKeyDelete ??=
        _dylib.lookupFunction<_c_TWStoredKeyDelete, _dart_TWStoredKeyDelete>(
            'TWStoredKeyDelete');
    return _TWStoredKeyDelete(
      key,
    );
  }

  _dart_TWStoredKeyDelete _TWStoredKeyDelete;

  /// /// Stored key uniqie identifier.  Returned object needs to be deleted.
  ffi.Pointer<ffi.Void> TWStoredKeyIdentifier(
    ffi.Pointer<TWStoredKey> key,
  ) {
    _TWStoredKeyIdentifier ??= _dylib.lookupFunction<_c_TWStoredKeyIdentifier,
        _dart_TWStoredKeyIdentifier>('TWStoredKeyIdentifier');
    return _TWStoredKeyIdentifier(
      key,
    );
  }

  _dart_TWStoredKeyIdentifier _TWStoredKeyIdentifier;

  /// /// Stored key namer.  Returned object needs to be deleted.
  ffi.Pointer<ffi.Void> TWStoredKeyName(
    ffi.Pointer<TWStoredKey> key,
  ) {
    _TWStoredKeyName ??=
        _dylib.lookupFunction<_c_TWStoredKeyName, _dart_TWStoredKeyName>(
            'TWStoredKeyName');
    return _TWStoredKeyName(
      key,
    );
  }

  _dart_TWStoredKeyName _TWStoredKeyName;

  /// /// Whether this key is a mnemonic phrase for a HD wallet.
  int TWStoredKeyIsMnemonic(
    ffi.Pointer<TWStoredKey> key,
  ) {
    _TWStoredKeyIsMnemonic ??= _dylib.lookupFunction<_c_TWStoredKeyIsMnemonic,
        _dart_TWStoredKeyIsMnemonic>('TWStoredKeyIsMnemonic');
    return _TWStoredKeyIsMnemonic(
      key,
    );
  }

  _dart_TWStoredKeyIsMnemonic _TWStoredKeyIsMnemonic;

  /// /// The number of accounts.
  int TWStoredKeyAccountCount(
    ffi.Pointer<TWStoredKey> key,
  ) {
    _TWStoredKeyAccountCount ??= _dylib.lookupFunction<
        _c_TWStoredKeyAccountCount,
        _dart_TWStoredKeyAccountCount>('TWStoredKeyAccountCount');
    return _TWStoredKeyAccountCount(
      key,
    );
  }

  _dart_TWStoredKeyAccountCount _TWStoredKeyAccountCount;

  /// /// Returns the account at a given index.  Returned object needs to be deleted.
  ffi.Pointer<TWAccount> TWStoredKeyAccount(
    ffi.Pointer<TWStoredKey> key,
    int index,
  ) {
    _TWStoredKeyAccount ??=
        _dylib.lookupFunction<_c_TWStoredKeyAccount, _dart_TWStoredKeyAccount>(
            'TWStoredKeyAccount');
    return _TWStoredKeyAccount(
      key,
      index,
    );
  }

  _dart_TWStoredKeyAccount _TWStoredKeyAccount;

  /// /// Returns the account for a specific coin, creating it if necessary.  Returned object needs to be deleted.
  ffi.Pointer<TWAccount> TWStoredKeyAccountForCoin(
    ffi.Pointer<TWStoredKey> key,
    int coin,
    ffi.Pointer<TWHDWallet> wallet,
  ) {
    _TWStoredKeyAccountForCoin ??= _dylib.lookupFunction<
        _c_TWStoredKeyAccountForCoin,
        _dart_TWStoredKeyAccountForCoin>('TWStoredKeyAccountForCoin');
    return _TWStoredKeyAccountForCoin(
      key,
      coin,
      wallet,
    );
  }

  _dart_TWStoredKeyAccountForCoin _TWStoredKeyAccountForCoin;

  /// /// Remove the account for a specific coin
  void TWStoredKeyRemoveAccountForCoin(
    ffi.Pointer<TWStoredKey> key,
    int coin,
  ) {
    _TWStoredKeyRemoveAccountForCoin ??= _dylib.lookupFunction<
            _c_TWStoredKeyRemoveAccountForCoin,
            _dart_TWStoredKeyRemoveAccountForCoin>(
        'TWStoredKeyRemoveAccountForCoin');
    return _TWStoredKeyRemoveAccountForCoin(
      key,
      coin,
    );
  }

  _dart_TWStoredKeyRemoveAccountForCoin _TWStoredKeyRemoveAccountForCoin;

  /// /// Adds a new account.
  void TWStoredKeyAddAccount(
    ffi.Pointer<TWStoredKey> key,
    ffi.Pointer<ffi.Void> address,
    int coin,
    ffi.Pointer<ffi.Void> derivationPath,
    ffi.Pointer<ffi.Void> extetndedPublicKey,
  ) {
    _TWStoredKeyAddAccount ??= _dylib.lookupFunction<_c_TWStoredKeyAddAccount,
        _dart_TWStoredKeyAddAccount>('TWStoredKeyAddAccount');
    return _TWStoredKeyAddAccount(
      key,
      address,
      coin,
      derivationPath,
      extetndedPublicKey,
    );
  }

  _dart_TWStoredKeyAddAccount _TWStoredKeyAddAccount;

  /// /// Saves the key to a file.
  int TWStoredKeyStore(
    ffi.Pointer<TWStoredKey> key,
    ffi.Pointer<ffi.Void> path,
  ) {
    _TWStoredKeyStore ??=
        _dylib.lookupFunction<_c_TWStoredKeyStore, _dart_TWStoredKeyStore>(
            'TWStoredKeyStore');
    return _TWStoredKeyStore(
      key,
      path,
    );
  }

  _dart_TWStoredKeyStore _TWStoredKeyStore;

  /// /// Decrypts the private key.
  ffi.Pointer<ffi.Void> TWStoredKeyDecryptPrivateKey(
    ffi.Pointer<TWStoredKey> key,
    ffi.Pointer<ffi.Void> password,
  ) {
    _TWStoredKeyDecryptPrivateKey ??= _dylib.lookupFunction<
        _c_TWStoredKeyDecryptPrivateKey,
        _dart_TWStoredKeyDecryptPrivateKey>('TWStoredKeyDecryptPrivateKey');
    return _TWStoredKeyDecryptPrivateKey(
      key,
      password,
    );
  }

  _dart_TWStoredKeyDecryptPrivateKey _TWStoredKeyDecryptPrivateKey;

  /// /// Decrypts the mnemonic phrase.
  ffi.Pointer<ffi.Void> TWStoredKeyDecryptMnemonic(
    ffi.Pointer<TWStoredKey> key,
    ffi.Pointer<ffi.Void> password,
  ) {
    _TWStoredKeyDecryptMnemonic ??= _dylib.lookupFunction<
        _c_TWStoredKeyDecryptMnemonic,
        _dart_TWStoredKeyDecryptMnemonic>('TWStoredKeyDecryptMnemonic');
    return _TWStoredKeyDecryptMnemonic(
      key,
      password,
    );
  }

  _dart_TWStoredKeyDecryptMnemonic _TWStoredKeyDecryptMnemonic;

  /// /// Returns the private key for a specific coin.  Returned object needs to be deleted.
  ffi.Pointer<TWPrivateKey> TWStoredKeyPrivateKey(
    ffi.Pointer<TWStoredKey> key,
    int coin,
    ffi.Pointer<ffi.Void> password,
  ) {
    _TWStoredKeyPrivateKey ??= _dylib.lookupFunction<_c_TWStoredKeyPrivateKey,
        _dart_TWStoredKeyPrivateKey>('TWStoredKeyPrivateKey');
    return _TWStoredKeyPrivateKey(
      key,
      coin,
      password,
    );
  }

  _dart_TWStoredKeyPrivateKey _TWStoredKeyPrivateKey;

  /// /// Dercrypts and returns the HD Wallet for mnemonic phrase keys.  Returned object needs to be deleted.
  ffi.Pointer<TWHDWallet> TWStoredKeyWallet(
    ffi.Pointer<TWStoredKey> key,
    ffi.Pointer<ffi.Void> password,
  ) {
    _TWStoredKeyWallet ??=
        _dylib.lookupFunction<_c_TWStoredKeyWallet, _dart_TWStoredKeyWallet>(
            'TWStoredKeyWallet');
    return _TWStoredKeyWallet(
      key,
      password,
    );
  }

  _dart_TWStoredKeyWallet _TWStoredKeyWallet;

  /// /// Exports the key as JSON
  ffi.Pointer<ffi.Void> TWStoredKeyExportJSON(
    ffi.Pointer<TWStoredKey> key,
  ) {
    _TWStoredKeyExportJSON ??= _dylib.lookupFunction<_c_TWStoredKeyExportJSON,
        _dart_TWStoredKeyExportJSON>('TWStoredKeyExportJSON');
    return _TWStoredKeyExportJSON(
      key,
    );
  }

  _dart_TWStoredKeyExportJSON _TWStoredKeyExportJSON;

  /// /// Fills in empty and invalid addresses.
  /// ///
  /// /// This method needs the encryption password to re-derive addresses from private keys.
  /// /// @returns `false` if the password is incorrect.
  int TWStoredKeyFixAddresses(
    ffi.Pointer<TWStoredKey> key,
    ffi.Pointer<ffi.Void> password,
  ) {
    _TWStoredKeyFixAddresses ??= _dylib.lookupFunction<
        _c_TWStoredKeyFixAddresses,
        _dart_TWStoredKeyFixAddresses>('TWStoredKeyFixAddresses');
    return _TWStoredKeyFixAddresses(
      key,
      password,
    );
  }

  _dart_TWStoredKeyFixAddresses _TWStoredKeyFixAddresses;
}

abstract class TWBlockchain {
  static const int TWBlockchainBitcoin = 0;
  static const int TWBlockchainEthereum = 1;
  static const int TWBlockchainWanchain = 2;
  static const int TWBlockchainVechain = 3;
  static const int TWBlockchainTron = 4;
  static const int TWBlockchainIcon = 5;
  static const int TWBlockchainBinance = 6;
  static const int TWBlockchainRipple = 7;
  static const int TWBlockchainTezos = 8;
  static const int TWBlockchainNimiq = 9;
  static const int TWBlockchainStellar = 10;
  static const int TWBlockchainAion = 11;
  static const int TWBlockchainCosmos = 12;
  static const int TWBlockchainTheta = 13;
  static const int TWBlockchainOntology = 14;
  static const int TWBlockchainZilliqa = 15;
  static const int TWBlockchainIoTeX = 16;
  static const int TWBlockchainEOS = 17;
  static const int TWBlockchainNano = 18;
  static const int TWBlockchainNULS = 19;
  static const int TWBlockchainWaves = 20;
  static const int TWBlockchainAeternity = 21;
  static const int TWBlockchainNebulas = 22;
  static const int TWBlockchainFIO = 23;
  static const int TWBlockchainSolana = 24;
  static const int TWBlockchainHarmony = 25;
  static const int TWBlockchainNEAR = 26;
  static const int TWBlockchainAlgorand = 27;
  static const int TWBlockchainTON = 28;
  static const int TWBlockchainPolkadot = 29;
  static const int TWBlockchainCardano = 30;
  static const int TWBlockchainNEO = 31;
  static const int TWBlockchainFilecoin = 32;
  static const int TWBlockchainElrondNetwork = 33;
}

/// /// Elliptic cruves
abstract class TWCurve {
  static const int TWCurveSECP256k1 = 0;
  static const int TWCurveED25519 = 1;
  static const int TWCurveED25519Blake2bNano = 2;
  static const int TWCurveCurve25519 = 3;
  static const int TWCurveNIST256p1 = 4;
  static const int TWCurveED25519Extended = 5;
  static const int TWCurveNone = 6;
}

/// ///  Registered HD version bytes
/// ///
/// /// - SeeAlso: https://github.com/satoshilabs/slips/blob/master/slip-0132.md
abstract class TWHDVersion {
  static const int TWHDVersionNone = 0;
  static const int TWHDVersionXPUB = 76067358;
  static const int TWHDVersionXPRV = 76066276;
  static const int TWHDVersionYPUB = 77429938;
  static const int TWHDVersionYPRV = 77428856;
  static const int TWHDVersionZPUB = 78792518;
  static const int TWHDVersionZPRV = 78791436;
  static const int TWHDVersionLTUB = 27108450;
  static const int TWHDVersionLTPV = 27106558;
  static const int TWHDVersionMTUB = 28471030;
  static const int TWHDVersionMTPV = 28469138;
  static const int TWHDVersionDPUB = 50178342;
  static const int TWHDVersionDPRV = 50177256;
  static const int TWHDVersionDGUB = 49990397;
  static const int TWHDVersionDGPV = 49988504;
}

/// ///  Registered human-readable parts for BIP-0173
/// ///
/// /// - SeeAlso: https://github.com/satoshilabs/slips/blob/master/slip-0173.md
abstract class TWHRP {
  static const int TWHRPUnknown = 0;
  static const int TWHRPBitcoin = 1;
  static const int TWHRPLitecoin = 2;
  static const int TWHRPViacoin = 3;
  static const int TWHRPGroestlcoin = 4;
  static const int TWHRPDigiByte = 5;
  static const int TWHRPMonacoin = 6;
  static const int TWHRPCosmos = 7;
  static const int TWHRPBitcoinCash = 8;
  static const int TWHRPBitcoinGold = 9;
  static const int TWHRPIoTeX = 10;
  static const int TWHRPZilliqa = 11;
  static const int TWHRPTerra = 12;
  static const int TWHRPKava = 13;
  static const int TWHRPBandChain = 14;
  static const int TWHRPElrond = 15;
  static const int TWHRPBinance = 16;
  static const int TWHRPHarmony = 17;
  static const int TWHRPCardano = 18;
  static const int TWHRPQtum = 19;
}

/// /// Public key types
abstract class TWPublicKeyType {
  static const int TWPublicKeyTypeSECP256k1 = 0;
  static const int TWPublicKeyTypeSECP256k1Extended = 1;
  static const int TWPublicKeyTypeNIST256p1 = 2;
  static const int TWPublicKeyTypeNIST256p1Extended = 3;
  static const int TWPublicKeyTypeED25519 = 4;
  static const int TWPublicKeyTypeED25519Blake2b = 5;
  static const int TWPublicKeyTypeCURVE25519 = 6;
  static const int TWPublicKeyTypeED25519Extended = 7;
}

class TWPublicKey extends ffi.Struct {}

class TWPrivateKey extends ffi.Struct {}

/// /// HD wallet purpose
/// ///
/// /// See https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki
/// /// See https://github.com/bitcoin/bips/blob/master/bip-0049.mediawiki
/// /// See https://github.com/bitcoin/bips/blob/master/bip-0084.mediawiki
abstract class TWPurpose {
  static const int TWPurposeBIP44 = 44;
  static const int TWPurposeBIP49 = 49;
  static const int TWPurposeBIP84 = 84;
  static const int TWPurposeBIP1852 = 1852;
}

/// /// Coin type for Level 2 of BIP44.
/// ///
/// /// - SeeAlso: https://github.com/satoshilabs/slips/blob/master/slip-0044.md
abstract class TWCoinType {
  static const int TWCoinTypeAeternity = 457;
  static const int TWCoinTypeAion = 425;
  static const int TWCoinTypeBinance = 714;
  static const int TWCoinTypeBitcoin = 0;
  static const int TWCoinTypeBitcoinCash = 145;
  static const int TWCoinTypeBitcoinGold = 156;
  static const int TWCoinTypeCallisto = 820;
  static const int TWCoinTypeCardano = 1815;
  static const int TWCoinTypeCosmos = 118;
  static const int TWCoinTypeDash = 5;
  static const int TWCoinTypeDecred = 42;
  static const int TWCoinTypeDigiByte = 20;
  static const int TWCoinTypeDogecoin = 3;
  static const int TWCoinTypeEOS = 194;
  static const int TWCoinTypeEthereum = 60;
  static const int TWCoinTypeEthereumClassic = 61;
  static const int TWCoinTypeFIO = 235;
  static const int TWCoinTypeGoChain = 6060;
  static const int TWCoinTypeGroestlcoin = 17;
  static const int TWCoinTypeICON = 74;
  static const int TWCoinTypeIoTeX = 304;
  static const int TWCoinTypeKava = 459;
  static const int TWCoinTypeKin = 2017;
  static const int TWCoinTypeLitecoin = 2;
  static const int TWCoinTypeMonacoin = 22;
  static const int TWCoinTypeNebulas = 2718;
  static const int TWCoinTypeNULS = 8964;
  static const int TWCoinTypeNano = 165;
  static const int TWCoinTypeNEAR = 397;
  static const int TWCoinTypeNimiq = 242;
  static const int TWCoinTypeOntology = 1024;
  static const int TWCoinTypePOANetwork = 178;
  static const int TWCoinTypeQtum = 2301;
  static const int TWCoinTypeXRP = 144;
  static const int TWCoinTypeSolana = 501;
  static const int TWCoinTypeStellar = 148;
  static const int TWCoinTypeTON = 396;
  static const int TWCoinTypeTezos = 1729;
  static const int TWCoinTypeTheta = 500;
  static const int TWCoinTypeThunderToken = 1001;
  static const int TWCoinTypeNEO = 888;
  static const int TWCoinTypeTomoChain = 889;
  static const int TWCoinTypeTron = 195;
  static const int TWCoinTypeVeChain = 818;
  static const int TWCoinTypeViacoin = 14;
  static const int TWCoinTypeWanchain = 5718350;
  static const int TWCoinTypeZcash = 133;
  static const int TWCoinTypeZcoin = 136;
  static const int TWCoinTypeZilliqa = 313;
  static const int TWCoinTypeZelcash = 19167;
  static const int TWCoinTypeRavencoin = 175;
  static const int TWCoinTypeWaves = 5741564;
  static const int TWCoinTypeTerra = 330;
  static const int TWCoinTypeHarmony = 1023;
  static const int TWCoinTypeAlgorand = 283;
  static const int TWCoinTypeKusama = 434;
  static const int TWCoinTypePolkadot = 354;
  static const int TWCoinTypeFilecoin = 461;
  static const int TWCoinTypeElrond = 508;
  static const int TWCoinTypeBandChain = 494;
  static const int TWCoinTypeSmartChainLegacy = 10000714;
  static const int TWCoinTypeSmartChain = 20000714;
}

class TWHDWallet extends ffi.Struct {}

/// /// Represents a key stored as an encrypted file.
class TWStoredKey extends ffi.Struct {}

class TWAccount extends ffi.Struct {}

typedef _c_TWHDVersionIsPublic = ffi.Int32 Function(
  ffi.Int32 version,
);

typedef _dart_TWHDVersionIsPublic = int Function(
  int version,
);

typedef _c_TWHDVersionIsPrivate = ffi.Int32 Function(
  ffi.Int32 version,
);

typedef _dart_TWHDVersionIsPrivate = int Function(
  int version,
);

typedef _c_stringForHRP = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 hrp,
);

typedef _dart_stringForHRP = ffi.Pointer<ffi.Int8> Function(
  int hrp,
);

typedef _c_hrpForString = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> string,
);

typedef _dart_hrpForString = int Function(
  ffi.Pointer<ffi.Int8> string,
);

typedef _c_TWDataCreateWithBytes = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint8> bytes,
  ffi.Uint64 size,
);

typedef _dart_TWDataCreateWithBytes = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint8> bytes,
  int size,
);

typedef _c_TWDataCreateWithSize = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 size,
);

typedef _dart_TWDataCreateWithSize = ffi.Pointer<ffi.Void> Function(
  int size,
);

typedef _c_TWDataCreateWithData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWDataCreateWithData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWDataCreateWithHexString = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hex,
);

typedef _dart_TWDataCreateWithHexString = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> hex,
);

typedef _c_TWDataSize = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWDataSize = int Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWDataBytes = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWDataBytes = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWDataGet = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Uint64 index,
);

typedef _dart_TWDataGet = int Function(
  ffi.Pointer<ffi.Void> data,
  int index,
);

typedef _c_TWDataSet = ffi.Void Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Uint64 index,
  ffi.Uint8 byte,
);

typedef _dart_TWDataSet = void Function(
  ffi.Pointer<ffi.Void> data,
  int index,
  int byte,
);

typedef _c_TWDataCopyBytes = ffi.Void Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Uint64 start,
  ffi.Uint64 size,
  ffi.Pointer<ffi.Uint8> output,
);

typedef _dart_TWDataCopyBytes = void Function(
  ffi.Pointer<ffi.Void> data,
  int start,
  int size,
  ffi.Pointer<ffi.Uint8> output,
);

typedef _c_TWDataReplaceBytes = ffi.Void Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Uint64 start,
  ffi.Uint64 size,
  ffi.Pointer<ffi.Uint8> bytes,
);

typedef _dart_TWDataReplaceBytes = void Function(
  ffi.Pointer<ffi.Void> data,
  int start,
  int size,
  ffi.Pointer<ffi.Uint8> bytes,
);

typedef _c_TWDataAppendBytes = ffi.Void Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Uint8> bytes,
  ffi.Uint64 size,
);

typedef _dart_TWDataAppendBytes = void Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Uint8> bytes,
  int size,
);

typedef _c_TWDataAppendByte = ffi.Void Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Uint8 byte,
);

typedef _dart_TWDataAppendByte = void Function(
  ffi.Pointer<ffi.Void> data,
  int byte,
);

typedef _c_TWDataAppendData = ffi.Void Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> append,
);

typedef _dart_TWDataAppendData = void Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> append,
);

typedef _c_TWDataReverse = ffi.Void Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWDataReverse = void Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWDataReset = ffi.Void Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWDataReset = void Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWDataDelete = ffi.Void Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWDataDelete = void Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWDataEqual = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> lhs,
  ffi.Pointer<ffi.Void> rhs,
);

typedef _dart_TWDataEqual = int Function(
  ffi.Pointer<ffi.Void> lhs,
  ffi.Pointer<ffi.Void> rhs,
);

typedef _c_TWStringCreateWithUTF8Bytes = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> bytes,
);

typedef _dart_TWStringCreateWithUTF8Bytes = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> bytes,
);

typedef _c_TWStringCreateWithRawBytes = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint8> bytes,
  ffi.Uint64 size,
);

typedef _dart_TWStringCreateWithRawBytes = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Uint8> bytes,
  int size,
);

typedef _c_TWStringCreateWithHexData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWStringCreateWithHexData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWStringSize = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _dart_TWStringSize = int Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _c_TWStringGet = ffi.Int8 Function(
  ffi.Pointer<ffi.Void> string,
  ffi.Uint64 index,
);

typedef _dart_TWStringGet = int Function(
  ffi.Pointer<ffi.Void> string,
  int index,
);

typedef _c_TWStringUTF8Bytes = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _dart_TWStringUTF8Bytes = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _c_TWStringDelete = ffi.Void Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _dart_TWStringDelete = void Function(
  ffi.Pointer<ffi.Void> string,
);

typedef _c_TWStringEqual = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> lhs,
  ffi.Pointer<ffi.Void> rhs,
);

typedef _dart_TWStringEqual = int Function(
  ffi.Pointer<ffi.Void> lhs,
  ffi.Pointer<ffi.Void> rhs,
);

typedef _c_TWPublicKeyCreateWithData = ffi.Pointer<TWPublicKey> Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Int32 type,
);

typedef _dart_TWPublicKeyCreateWithData = ffi.Pointer<TWPublicKey> Function(
  ffi.Pointer<ffi.Void> data,
  int type,
);

typedef _c_TWPublicKeyDelete = ffi.Void Function(
  ffi.Pointer<TWPublicKey> pk,
);

typedef _dart_TWPublicKeyDelete = void Function(
  ffi.Pointer<TWPublicKey> pk,
);

typedef _c_TWPublicKeyIsValid = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Int32 type,
);

typedef _dart_TWPublicKeyIsValid = int Function(
  ffi.Pointer<ffi.Void> data,
  int type,
);

typedef _c_TWPublicKeyIsCompressed = ffi.Int32 Function(
  ffi.Pointer<TWPublicKey> pk,
);

typedef _dart_TWPublicKeyIsCompressed = int Function(
  ffi.Pointer<TWPublicKey> pk,
);

typedef _c_TWPublicKeyCompressed = ffi.Pointer<TWPublicKey> Function(
  ffi.Pointer<TWPublicKey> from,
);

typedef _dart_TWPublicKeyCompressed = ffi.Pointer<TWPublicKey> Function(
  ffi.Pointer<TWPublicKey> from,
);

typedef _c_TWPublicKeyUncompressed = ffi.Pointer<TWPublicKey> Function(
  ffi.Pointer<TWPublicKey> from,
);

typedef _dart_TWPublicKeyUncompressed = ffi.Pointer<TWPublicKey> Function(
  ffi.Pointer<TWPublicKey> from,
);

typedef _c_TWPublicKeyData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPublicKey> pk,
);

typedef _dart_TWPublicKeyData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPublicKey> pk,
);

typedef _c_TWPublicKeyVerify = ffi.Int32 Function(
  ffi.Pointer<TWPublicKey> pk,
  ffi.Pointer<ffi.Void> signature,
  ffi.Pointer<ffi.Void> message,
);

typedef _dart_TWPublicKeyVerify = int Function(
  ffi.Pointer<TWPublicKey> pk,
  ffi.Pointer<ffi.Void> signature,
  ffi.Pointer<ffi.Void> message,
);

typedef _c_TWPublicKeyVerifySchnorr = ffi.Int32 Function(
  ffi.Pointer<TWPublicKey> pk,
  ffi.Pointer<ffi.Void> signature,
  ffi.Pointer<ffi.Void> message,
);

typedef _dart_TWPublicKeyVerifySchnorr = int Function(
  ffi.Pointer<TWPublicKey> pk,
  ffi.Pointer<ffi.Void> signature,
  ffi.Pointer<ffi.Void> message,
);

typedef _c_TWPublicKeyKeyType = ffi.Int32 Function(
  ffi.Pointer<TWPublicKey> publicKey,
);

typedef _dart_TWPublicKeyKeyType = int Function(
  ffi.Pointer<TWPublicKey> publicKey,
);

typedef _c_TWPublicKeyDescription = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPublicKey> publicKey,
);

typedef _dart_TWPublicKeyDescription = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPublicKey> publicKey,
);

typedef _c_TWPublicKeyRecover = ffi.Pointer<TWPublicKey> Function(
  ffi.Pointer<ffi.Void> signature,
  ffi.Pointer<ffi.Void> message,
);

typedef _dart_TWPublicKeyRecover = ffi.Pointer<TWPublicKey> Function(
  ffi.Pointer<ffi.Void> signature,
  ffi.Pointer<ffi.Void> message,
);

typedef _c_TWPrivateKeyCreate = ffi.Pointer<TWPrivateKey> Function();

typedef _dart_TWPrivateKeyCreate = ffi.Pointer<TWPrivateKey> Function();

typedef _c_TWPrivateKeyCreateWithData = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_TWPrivateKeyCreateWithData = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<ffi.Void> data,
);

typedef _c_TWPrivateKeyCreateCopy = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWPrivateKey> key,
);

typedef _dart_TWPrivateKeyCreateCopy = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWPrivateKey> key,
);

typedef _c_TWPrivateKeyDelete = ffi.Void Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _dart_TWPrivateKeyDelete = void Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _c_TWPrivateKeyIsValid = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Int32 curve,
);

typedef _dart_TWPrivateKeyIsValid = int Function(
  ffi.Pointer<ffi.Void> data,
  int curve,
);

typedef _c_TWPrivateKeyData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _dart_TWPrivateKeyData = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _c_TWPrivateKeyGetPublicKeySecp256k1 = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<TWPrivateKey> pk,
  ffi.Int32 compressed,
);

typedef _dart_TWPrivateKeyGetPublicKeySecp256k1 = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<TWPrivateKey> pk,
  int compressed,
);

typedef _c_TWPrivateKeyGetPublicKeyNist256p1 = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _dart_TWPrivateKeyGetPublicKeyNist256p1 = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _c_TWPrivateKeyGetPublicKeyEd25519 = ffi.Pointer<TWPublicKey> Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _dart_TWPrivateKeyGetPublicKeyEd25519 = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _c_TWPrivateKeyGetPublicKeyEd25519Blake2b = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _dart_TWPrivateKeyGetPublicKeyEd25519Blake2b = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _c_TWPrivateKeyGetPublicKeyEd25519Extended = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _dart_TWPrivateKeyGetPublicKeyEd25519Extended = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _c_TWPrivateKeyGetPublicKeyCurve25519 = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _dart_TWPrivateKeyGetPublicKeyCurve25519 = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<TWPrivateKey> pk,
);

typedef _c_TWPrivateKeySign = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPrivateKey> pk,
  ffi.Pointer<ffi.Void> digest,
  ffi.Int32 curve,
);

typedef _dart_TWPrivateKeySign = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPrivateKey> pk,
  ffi.Pointer<ffi.Void> digest,
  int curve,
);

typedef _c_TWPrivateKeySignAsDER = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPrivateKey> pk,
  ffi.Pointer<ffi.Void> digest,
  ffi.Int32 curve,
);

typedef _dart_TWPrivateKeySignAsDER = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPrivateKey> pk,
  ffi.Pointer<ffi.Void> digest,
  int curve,
);

typedef _c_TWPrivateKeySignSchnorr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPrivateKey> pk,
  ffi.Pointer<ffi.Void> message,
  ffi.Int32 curve,
);

typedef _dart_TWPrivateKeySignSchnorr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWPrivateKey> pk,
  ffi.Pointer<ffi.Void> message,
  int curve,
);

typedef _c_TWCoinTypeBlockchain = ffi.Int32 Function(
  ffi.Int32 coin,
);

typedef _dart_TWCoinTypeBlockchain = int Function(
  int coin,
);

typedef _c_TWCoinTypePurpose = ffi.Int32 Function(
  ffi.Int32 coin,
);

typedef _dart_TWCoinTypePurpose = int Function(
  int coin,
);

typedef _c_TWCoinTypeCurve = ffi.Int32 Function(
  ffi.Int32 coin,
);

typedef _dart_TWCoinTypeCurve = int Function(
  int coin,
);

typedef _c_TWCoinTypeXpubVersion = ffi.Int32 Function(
  ffi.Int32 coin,
);

typedef _dart_TWCoinTypeXpubVersion = int Function(
  int coin,
);

typedef _c_TWCoinTypeXprvVersion = ffi.Int32 Function(
  ffi.Int32 coin,
);

typedef _dart_TWCoinTypeXprvVersion = int Function(
  int coin,
);

typedef _c_TWCoinTypeValidate = ffi.Int32 Function(
  ffi.Int32 coin,
  ffi.Pointer<ffi.Void> address,
);

typedef _dart_TWCoinTypeValidate = int Function(
  int coin,
  ffi.Pointer<ffi.Void> address,
);

typedef _c_TWCoinTypeDerivationPath = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 coin,
);

typedef _dart_TWCoinTypeDerivationPath = ffi.Pointer<ffi.Void> Function(
  int coin,
);

typedef _c_TWCoinTypeDeriveAddress = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 coin,
  ffi.Pointer<TWPrivateKey> privateKey,
);

typedef _dart_TWCoinTypeDeriveAddress = ffi.Pointer<ffi.Void> Function(
  int coin,
  ffi.Pointer<TWPrivateKey> privateKey,
);

typedef _c_TWCoinTypeDeriveAddressFromPublicKey = ffi.Pointer<ffi.Void>
    Function(
  ffi.Int32 coin,
  ffi.Pointer<TWPublicKey> publicKey,
);

typedef _dart_TWCoinTypeDeriveAddressFromPublicKey = ffi.Pointer<ffi.Void>
    Function(
  int coin,
  ffi.Pointer<TWPublicKey> publicKey,
);

typedef _c_TWCoinTypeHRP = ffi.Int32 Function(
  ffi.Int32 coin,
);

typedef _dart_TWCoinTypeHRP = int Function(
  int coin,
);

typedef _c_TWCoinTypeP2pkhPrefix = ffi.Uint8 Function(
  ffi.Int32 coin,
);

typedef _dart_TWCoinTypeP2pkhPrefix = int Function(
  int coin,
);

typedef _c_TWCoinTypeP2shPrefix = ffi.Uint8 Function(
  ffi.Int32 coin,
);

typedef _dart_TWCoinTypeP2shPrefix = int Function(
  int coin,
);

typedef _c_TWCoinTypeStaticPrefix = ffi.Uint8 Function(
  ffi.Int32 coin,
);

typedef _dart_TWCoinTypeStaticPrefix = int Function(
  int coin,
);

typedef _c_TWCoinTypeSlip44Id = ffi.Uint32 Function(
  ffi.Int32 coin,
);

typedef _dart_TWCoinTypeSlip44Id = int Function(
  int coin,
);

typedef _c_TWHDWalletIsValid = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> mnemonic,
);

typedef _dart_TWHDWalletIsValid = int Function(
  ffi.Pointer<ffi.Void> mnemonic,
);

typedef _c_TWHDWalletCreate = ffi.Pointer<TWHDWallet> Function(
  ffi.Int32 strength,
  ffi.Pointer<ffi.Void> passphrase,
);

typedef _dart_TWHDWalletCreate = ffi.Pointer<TWHDWallet> Function(
  int strength,
  ffi.Pointer<ffi.Void> passphrase,
);

typedef _c_TWHDWalletCreateWithMnemonic = ffi.Pointer<TWHDWallet> Function(
  ffi.Pointer<ffi.Void> mnemonic,
  ffi.Pointer<ffi.Void> passphrase,
);

typedef _dart_TWHDWalletCreateWithMnemonic = ffi.Pointer<TWHDWallet> Function(
  ffi.Pointer<ffi.Void> mnemonic,
  ffi.Pointer<ffi.Void> passphrase,
);

typedef _c_TWHDWalletCreateWithData = ffi.Pointer<TWHDWallet> Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> passphrase,
);

typedef _dart_TWHDWalletCreateWithData = ffi.Pointer<TWHDWallet> Function(
  ffi.Pointer<ffi.Void> data,
  ffi.Pointer<ffi.Void> passphrase,
);

typedef _c_TWHDWalletDelete = ffi.Void Function(
  ffi.Pointer<TWHDWallet> wallet,
);

typedef _dart_TWHDWalletDelete = void Function(
  ffi.Pointer<TWHDWallet> wallet,
);

typedef _c_TWHDWalletSeed = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWHDWallet> wallet,
);

typedef _dart_TWHDWalletSeed = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWHDWallet> wallet,
);

typedef _c_TWHDWalletMnemonic = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWHDWallet> wallet,
);

typedef _dart_TWHDWalletMnemonic = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWHDWallet> wallet,
);

typedef _c_TWHDWalletGetMasterKey = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWHDWallet> wallet,
  ffi.Int32 curve,
);

typedef _dart_TWHDWalletGetMasterKey = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWHDWallet> wallet,
  int curve,
);

typedef _c_TWHDWalletGetKeyForCoin = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWHDWallet> wallet,
  ffi.Int32 coin,
);

typedef _dart_TWHDWalletGetKeyForCoin = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWHDWallet> wallet,
  int coin,
);

typedef _c_TWHDWalletGetAddressForCoin = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWHDWallet> wallet,
  ffi.Int32 coin,
);

typedef _dart_TWHDWalletGetAddressForCoin = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWHDWallet> wallet,
  int coin,
);

typedef _c_TWHDWalletGetKey = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWHDWallet> wallet,
  ffi.Int32 coin,
  ffi.Pointer<ffi.Void> derivationPath,
);

typedef _dart_TWHDWalletGetKey = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWHDWallet> wallet,
  int coin,
  ffi.Pointer<ffi.Void> derivationPath,
);

typedef _c_TWHDWalletGetKeyBIP44 = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWHDWallet> wallet,
  ffi.Int32 coin,
  ffi.Uint32 account,
  ffi.Uint32 change,
  ffi.Uint32 address,
);

typedef _dart_TWHDWalletGetKeyBIP44 = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWHDWallet> wallet,
  int coin,
  int account,
  int change,
  int address,
);

typedef _c_TWHDWalletGetExtendedPrivateKey = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWHDWallet> wallet,
  ffi.Int32 purpose,
  ffi.Int32 coin,
  ffi.Int32 version,
);

typedef _dart_TWHDWalletGetExtendedPrivateKey = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWHDWallet> wallet,
  int purpose,
  int coin,
  int version,
);

typedef _c_TWHDWalletGetExtendedPublicKey = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWHDWallet> wallet,
  ffi.Int32 purpose,
  ffi.Int32 coin,
  ffi.Int32 version,
);

typedef _dart_TWHDWalletGetExtendedPublicKey = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWHDWallet> wallet,
  int purpose,
  int coin,
  int version,
);

typedef _c_TWHDWalletGetPublicKeyFromExtended = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<ffi.Void> extended,
  ffi.Int32 coin,
  ffi.Pointer<ffi.Void> derivationPath,
);

typedef _dart_TWHDWalletGetPublicKeyFromExtended = ffi.Pointer<TWPublicKey>
    Function(
  ffi.Pointer<ffi.Void> extended,
  int coin,
  ffi.Pointer<ffi.Void> derivationPath,
);

typedef _c_TWStoredKeyLoad = ffi.Pointer<TWStoredKey> Function(
  ffi.Pointer<ffi.Void> path,
);

typedef _dart_TWStoredKeyLoad = ffi.Pointer<TWStoredKey> Function(
  ffi.Pointer<ffi.Void> path,
);

typedef _c_TWStoredKeyImportPrivateKey = ffi.Pointer<TWStoredKey> Function(
  ffi.Pointer<ffi.Void> privateKey,
  ffi.Pointer<ffi.Void> name,
  ffi.Pointer<ffi.Void> password,
  ffi.Int32 coin,
);

typedef _dart_TWStoredKeyImportPrivateKey = ffi.Pointer<TWStoredKey> Function(
  ffi.Pointer<ffi.Void> privateKey,
  ffi.Pointer<ffi.Void> name,
  ffi.Pointer<ffi.Void> password,
  int coin,
);

typedef _c_TWStoredKeyImportHDWallet = ffi.Pointer<TWStoredKey> Function(
  ffi.Pointer<ffi.Void> mnemonic,
  ffi.Pointer<ffi.Void> name,
  ffi.Pointer<ffi.Void> password,
  ffi.Int32 coin,
);

typedef _dart_TWStoredKeyImportHDWallet = ffi.Pointer<TWStoredKey> Function(
  ffi.Pointer<ffi.Void> mnemonic,
  ffi.Pointer<ffi.Void> name,
  ffi.Pointer<ffi.Void> password,
  int coin,
);

typedef _c_TWStoredKeyImportJSON = ffi.Pointer<TWStoredKey> Function(
  ffi.Pointer<ffi.Void> json,
);

typedef _dart_TWStoredKeyImportJSON = ffi.Pointer<TWStoredKey> Function(
  ffi.Pointer<ffi.Void> json,
);

typedef _c_TWStoredKeyCreate = ffi.Pointer<TWStoredKey> Function(
  ffi.Pointer<ffi.Void> name,
  ffi.Pointer<ffi.Void> password,
);

typedef _dart_TWStoredKeyCreate = ffi.Pointer<TWStoredKey> Function(
  ffi.Pointer<ffi.Void> name,
  ffi.Pointer<ffi.Void> password,
);

typedef _c_TWStoredKeyDelete = ffi.Void Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _dart_TWStoredKeyDelete = void Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _c_TWStoredKeyIdentifier = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _dart_TWStoredKeyIdentifier = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _c_TWStoredKeyName = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _dart_TWStoredKeyName = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _c_TWStoredKeyIsMnemonic = ffi.Int32 Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _dart_TWStoredKeyIsMnemonic = int Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _c_TWStoredKeyAccountCount = ffi.Uint64 Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _dart_TWStoredKeyAccountCount = int Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _c_TWStoredKeyAccount = ffi.Pointer<TWAccount> Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Uint64 index,
);

typedef _dart_TWStoredKeyAccount = ffi.Pointer<TWAccount> Function(
  ffi.Pointer<TWStoredKey> key,
  int index,
);

typedef _c_TWStoredKeyAccountForCoin = ffi.Pointer<TWAccount> Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Int32 coin,
  ffi.Pointer<TWHDWallet> wallet,
);

typedef _dart_TWStoredKeyAccountForCoin = ffi.Pointer<TWAccount> Function(
  ffi.Pointer<TWStoredKey> key,
  int coin,
  ffi.Pointer<TWHDWallet> wallet,
);

typedef _c_TWStoredKeyRemoveAccountForCoin = ffi.Void Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Int32 coin,
);

typedef _dart_TWStoredKeyRemoveAccountForCoin = void Function(
  ffi.Pointer<TWStoredKey> key,
  int coin,
);

typedef _c_TWStoredKeyAddAccount = ffi.Void Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> address,
  ffi.Int32 coin,
  ffi.Pointer<ffi.Void> derivationPath,
  ffi.Pointer<ffi.Void> extetndedPublicKey,
);

typedef _dart_TWStoredKeyAddAccount = void Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> address,
  int coin,
  ffi.Pointer<ffi.Void> derivationPath,
  ffi.Pointer<ffi.Void> extetndedPublicKey,
);

typedef _c_TWStoredKeyStore = ffi.Int32 Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> path,
);

typedef _dart_TWStoredKeyStore = int Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> path,
);

typedef _c_TWStoredKeyDecryptPrivateKey = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> password,
);

typedef _dart_TWStoredKeyDecryptPrivateKey = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> password,
);

typedef _c_TWStoredKeyDecryptMnemonic = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> password,
);

typedef _dart_TWStoredKeyDecryptMnemonic = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> password,
);

typedef _c_TWStoredKeyPrivateKey = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Int32 coin,
  ffi.Pointer<ffi.Void> password,
);

typedef _dart_TWStoredKeyPrivateKey = ffi.Pointer<TWPrivateKey> Function(
  ffi.Pointer<TWStoredKey> key,
  int coin,
  ffi.Pointer<ffi.Void> password,
);

typedef _c_TWStoredKeyWallet = ffi.Pointer<TWHDWallet> Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> password,
);

typedef _dart_TWStoredKeyWallet = ffi.Pointer<TWHDWallet> Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> password,
);

typedef _c_TWStoredKeyExportJSON = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _dart_TWStoredKeyExportJSON = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<TWStoredKey> key,
);

typedef _c_TWStoredKeyFixAddresses = ffi.Int32 Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> password,
);

typedef _dart_TWStoredKeyFixAddresses = int Function(
  ffi.Pointer<TWStoredKey> key,
  ffi.Pointer<ffi.Void> password,
);
